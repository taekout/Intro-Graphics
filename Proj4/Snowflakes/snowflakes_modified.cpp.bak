/*

I studied the snowflake math and theory from: http://answers.oreilly.com/topic/1383-create-a-monster-fractal-snowflake-using-processing/

*/

#include <cstdlib>

#if defined(__APPLE__) || defined(MACOSX)
#include <GLUT/glut.h>
#elif defined(_WIN32)
#include "glut.h"
#else
#include <GL/glut.h>
#endif

#include <iostream>
#include <math.h>
#include <fstream>

using namespace std;

int nCountEdges = 0;
float fracArr[50000][4];
class FractalVector{
public:
	float x, y, z, r, theta;

	FractalVector (float _x, float _y, float _r, float _theta) {
		x = _x; //Origin x
		y = _y; //Origin y
		z = 0.0f;
		r = _r; //Length
		theta = _theta; // Angle
	}

	float getEndX() { 
		return x + r*cos(theta/57.3);
	}
	
	float getEndY() {
		return y + r*sin(theta/57.3);
	}
	
	void saveVector() {
		glBegin(GL_LINE_STRIP);
			//Draw the current vector
			glColor3f(1.0, 0.3, 0.0);
			glVertex3f(x, y, z);
			glColor3f(0.1, 0.4, 0.8);
			glVertex3f(getEndX(), getEndY(), z);
		glEnd();
		fracArr[nCountEdges][0] = x;
		fracArr[nCountEdges][1] = y;
		fracArr[nCountEdges][2] = getEndX();
		fracArr[nCountEdges][3] = getEndY();
		nCountEdges ++;
		//cout << x << " " << y << " TO " << getEndX() << " " << getEndY() << endl;
	}
};

class Point{
public:
	float x;
	float y;
	float z;

public:
	Point(){x = -1; y = -1; z = -1;}
	Point(float x, float y, float z)
	{
		this ->x = x; this ->y = y; this ->z = z;
	}
	Point &operator =(const Point & src)
	{
		x = src.x;
		y = src.y;
		z = src.z;
		return *this;
	}
// ADD * operator!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	Point & operator *(float t)
	{
		Point *pt = new Point(this ->x, this ->y, this ->z);
		pt ->x = pt ->x * t;
		pt ->y = pt ->y * t;
		pt ->z = pt ->z * t;
		return *pt;
	}
	Point & operator+=(const Point &src)
	{
		x = x + src.x;
		y = y + src.y;
		z = z + src.z;
		return (*this);
	}
	Point & operator-=(const Point &src)
	{
		x = x - src.x;
		y = y - src.y;
		z = z - src.z;
		return	(*this);
	}
	const Point &operator-(const Point &src) const
	{
		return Point(*this) -= src;
	}
	const Point &operator +(const Point &src) const
	{
		return Point(*this) += src;
	}

	Point GetPoint(void)
	{
		Point ret(x, y, z);
		return	ret;
	}
	void NormalizeVector();
	static float GetLengthVector(Point p);
	static void CrossProduct(const Point p1, const Point p2, Point &p3);
	static float DotProduct(const Point p1, const Point p2)
	{
		return	p1.x * p2.x + p1.y * p2.y + p1.z * p2.z;
	}
};

class MyVector4
{
public:
	float p[4];
	MyVector4()
	{
		p[0] = 0; p[1] = 0; p[2] = 0; p[3] = 1.0;
	}
	MyVector4(float x, float y, float z)
	{
		p[0] = x; p[1] = y; p[2] = z; p[3] = 1.0;
	}
};

class MyMat4x4
{
public:
	float p[4][4];		//	00 01 02 03
						//  10 11 12 13
						//  20 21 22 23
						//  30 31 32 33
	MyMat4x4()
	{
		SetIdentity();
	}
	void SetIdentity()
	{
		for(int i=0; i<4; i++)
			for(int j=0; j<4; j++)
				p[i][j] = 0.0;
		p[0][0] = 1;	p[1][1] = 1;
		p[2][2] = 1;	p[3][3] = 1;
	}
	void RotateZ(float theta)	
	{
		SetIdentity();
		float rad = theta * 3.141592/180.0f;
		p[0][0] = cos(rad);
		p[0][1] = -sin(rad);
		p[1][0] = sin(rad);
		p[1][1] = cos(rad);
	}
	void Translate(float x, float y, float z)
	{
		SetIdentity();
		p[0][3] = x;
		p[1][3] = y;
		p[2][3] = z;
	}
	MyVector4 operator * (MyVector4 in)
	{
		MyVector4 out;
		for(int j=0; j<4; j++)
		{
			out.p[j] = 0.0;
			for(int i=0; i<4; i++)
				out.p[j] += p[j][i]*in.p[i]; 
		}
		return out;
	}

	MyMat4x4 operator * (MyMat4x4 in)
	{
		MyMat4x4 out;
		for(int i=0; i<4; i++)
			for(int j=0; j<4; j++)
			{
				out.p[i][j] = 0;
				for(int k=0; k<4; k++)
					out.p[i][j]+=
						p[i][k]*in.p[k][j];
			}
		
		return out;
	}

};				

void CreateNFF(string filename);

void MyInit()
{
	glClearColor(1.0,1.0,1.0,0.0);
}

void drawCircle(double x, double y, double z, double radius, float colorR,float colorG,float colorB)
{
	double y1 = y;
	double x1 = x;
	glColor3f(colorR, colorG, colorB);
	glBegin(GL_TRIANGLES);
	for(int i=0;i<361;i++)
	{
		double angle=(float)(((double)i)/57.29577957795135);   
		double x2=x+(radius*(float)sin((double)angle));
		double y2=y+(radius*(float)cos((double)angle));             
		glVertex3d(x,y, z);
		glVertex3d(x1,y1, z);
		glVertex3d(x2,y2, z);
		y1=y2;
		x1=x2;
	}
	glEnd();
}

void MyReshape(int w, int h)
{
	glViewport(0,0,w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45, 1.0, 0.01, 100);
}

int g_depth = 0;
void fractal(FractalVector *v, int N);
void MyDraw()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(0,0,3, 0,0,0, 0,1,0);
FractalVector *seed = new FractalVector(200.0/400 - 0.5,40.0/400 - 0.5,300.0/400,120);
fractal(seed,g_depth);
seed = new FractalVector(350.0/400 - 0.5,300.0/400 - 0.5,300.0/400,-120);
fractal (seed,g_depth);
seed = new FractalVector(50.0/400 - 0.5,300.0/400 - 0.5,300.0/400,0);
fractal (seed,g_depth);
cout << nCountEdges << endl;

glBegin(GL_POLYGON);
	glColor3f(1.0, 0.0, 0.0);
	for(int i = 0 ; i < nCountEdges ; i++)
	{
		glVertex3f(fracArr[i][0], fracArr[i][1], 0);
		glVertex3f(fracArr[i][2], fracArr[i][3], 0);
	}
glEnd();
	glFlush();
}

void MyKeyboard(unsigned char key, int x, int y)
{
	switch(key)
	{
		case 27 : 
			exit(3);
	}
}

int main(int argc, char * argv[])
{
	string arg1, arg2;
	arg1 = argv[1];
	arg2 = argv[2];
	if(argc != 3)
	{
		cout << "Usage> snowflakes -l #" << endl;
		cout << "# : number of subdivision" << endl;
		exit(-4);
	}
	if(arg1 != "-l")
	{
		cout << "It must be -l" << endl;
		exit(-2);
	}
	g_depth = atoi(arg2.c_str());
	// At first,  I will create the nff file now.
	CreateNFF("snowflake.nff");

	glutInit(&argc, argv);
	glutInitWindowPosition(100,100);
	glutInitWindowSize(400,400);
	glutCreateWindow("NFF");
	
	MyInit();
	glutReshapeFunc(MyReshape);
	glutDisplayFunc(MyDraw);
	glutKeyboardFunc(MyKeyboard);
	glutMainLoop();

	return	1;
}

void fractal(FractalVector *v, int N) {
	if (N == 0) {
		v ->saveVector(); //Draw the current vector
	}
	else{
		FractalVector *t1 = new FractalVector(v ->x,v ->y,v ->r/3.0,v ->theta);
		FractalVector *t2 = new FractalVector(t1 ->getEndX(), t1->getEndY(),
							v ->r/3.0, v ->theta + 60.0);
		FractalVector *t3 = new FractalVector(t2 ->getEndX(), t2->getEndY(),
							v ->r/3.0,v ->theta - 60.0);
		FractalVector *t4 = new FractalVector(t3 ->getEndX(), t3->getEndY(),
							v ->r/3.0,v ->theta);
		fractal(t1,N-1); //Recurse
		fractal(t2,N-1); //Recurse
		fractal(t3,N-1); //Recurse
		fractal(t4,N-1); //Recurse
	}
}

void CreateNFF(string filename)
{
	string kindStr;
	double ***vertexPts;
//	g_platonicVertexPts = vertexPts;
	ofstream out;
	out.open(kindStr.c_str());
	out << "b" << " " << "0.078 " << "0.361 " << "0.753" << endl;
	out << "v" << endl;
	out << "from 0 0 0" << endl;
	out << "at 0 0 1" << endl;
	out << "up 0 1 0" << endl;
	out << "angle 45" << endl;
	out << "hither 0.05" << endl;
	out << "resolution 512 512" << endl;
	out << "l 2 28 -5" << endl;
	out << "f 1 0.53 0 1 0 100000 0 0" << endl;
	// Now polygons
	// snowflakes polygons


}








